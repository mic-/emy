-- Minimal wrapper for the BASS audio library (v 2.4)
-- Mostly just includes the necessary functions for general setup and stream playback.
-- By Mic, 2019
--
-- BASS is Copyright (c) 1999-2019 Un4Seen Developments Ltd


include ewin32api.ew


export constant CD = 0

-- Error codes returned by BASS_GetErrorCode()
export constant BASS_OK				= 0     -- all is OK
export constant BASS_ERROR_MEM		= 1     -- memory error
export constant BASS_ERROR_FILEOPEN	= 2     -- can't open the file
export constant BASS_ERROR_DRIVER	= 3     -- can't find a free/valid driver
export constant BASS_ERROR_BUFLOST	= 4     -- the sample buffer was lost
export constant BASS_ERROR_HANDLE	= 5     -- invalid handle
export constant BASS_ERROR_FORMAT	= 6     -- unsupported sample format
export constant BASS_ERROR_POSITION	= 7     -- invalid position
export constant BASS_ERROR_INIT		= 8     -- BASS_Init has not been successfully called
export constant BASS_ERROR_START	= 9     -- BASS_Start has not been successfully called
export constant BASS_ERROR_SSL		= 10    -- SSL/HTTPS support isn't available
export constant BASS_ERROR_ALREADY	= 14    -- already initialized/paused/whatever
export constant BASS_ERROR_NOCHAN	= 18    -- can't get a free channel
export constant BASS_ERROR_ILLTYPE	= 19    -- an illegal type was specified
export constant BASS_ERROR_ILLPARAM	= 20    -- an illegal parameter was specified
export constant BASS_ERROR_NO3D		= 21    -- no 3D support
export constant BASS_ERROR_NOEAX	= 22    -- no EAX support
export constant BASS_ERROR_DEVICE	= 23    -- illegal device number
export constant BASS_ERROR_NOPLAY	= 24    -- not playing
export constant BASS_ERROR_FREQ		= 25    -- illegal sample rate
export constant BASS_ERROR_NOTFILE	= 27    -- the stream is not a file stream
export constant BASS_ERROR_NOHW		= 29    -- no hardware voices available
export constant BASS_ERROR_EMPTY	= 31    -- the MOD music has no sequence data
export constant BASS_ERROR_NONET	= 32    -- no internet connection could be opened
export constant BASS_ERROR_CREATE	= 33    -- couldn't create the file
export constant BASS_ERROR_NOFX		= 34    -- effects are not available
export constant BASS_ERROR_NOTAVAIL	= 37    -- requested data/action is not available
export constant BASS_ERROR_DECODE	= 38    -- the channel is/isn't a "decoding channel"
export constant BASS_ERROR_DX		= 39    -- a sufficient DirectX version is not installed
export constant BASS_ERROR_TIMEOUT	= 40    -- connection timedout
export constant BASS_ERROR_FILEFORM	= 41    -- unsupported file format
export constant BASS_ERROR_SPEAKER	= 42    -- unavailable speaker
export constant BASS_ERROR_VERSION	= 43    -- invalid BASS version (used by add-ons)
export constant BASS_ERROR_CODEC	= 44    -- codec is not available/supported
export constant BASS_ERROR_ENDED	= 45    -- the channel/file has ended
export constant BASS_ERROR_BUSY		= 46    -- the device is busy
export constant BASS_ERROR_UNKNOWN	= -1    -- some other mystery problem


-- Device setup flags
export constant BASS_DEVICE_8BITS       = 1 	-- 8 bit
export constant BASS_DEVICE_MONO        = 2 	-- mono
export constant BASS_DEVICE_3D          = 4 	-- enable 3D functionality
export constant BASS_DEVICE_16BITS      = 8 	-- limit output to 16 bit
export constant BASS_DEVICE_LATENCY		= 0x100	-- calculate device latency (BASS_INFO struct)
export constant BASS_DEVICE_CPSPEAKERS	= 0x400	-- detect speakers via Windows control panel
export constant BASS_DEVICE_SPEAKERS	= 0x800	-- force enabling of speaker assignment
export constant BASS_DEVICE_NOSPEAKER	= 0x1000	-- ignore speaker arrangement
export constant BASS_DEVICE_DMIX		= 0x2000	-- use ALSA "dmix" plugin
export constant BASS_DEVICE_FREQ		= 0x4000	-- set device sample rate
export constant BASS_DEVICE_STEREO		= 0x8000	-- limit output to stereo
export constant BASS_DEVICE_HOG			= 0x10000	-- hog/exclusive mode
export constant BASS_DEVICE_AUDIOTRACK	= 0x20000	-- use AudioTrack output
export constant BASS_DEVICE_DSOUND		= 0x40000	-- use DirectSound output

-- DirectSound interfaces (for use with BASS_GetDSoundObject)
global constant BASS_OBJECT_DS		= 1	-- IDirectSound
global constant BASS_OBJECT_DS3DL	= 2	-- IDirectSound3DListener

   
-- typdef struct BASS_INFO
export constant
    BASS_INFO_flags = 0,    -- device capabilities (DSCAPS_xxx flags)
    BASS_INFO_hwsize = 4,   -- size of total device hardware memory
    BASS_INFO_hwfree = 8,   -- size of free device hardware memory
    BASS_INFO_freesam = 12, -- number of free sample slots in the hardware
    BASS_INFO_free3d = 16,  -- number of free 3D sample slots in the hardware
    BASS_INFO_minrate = 20, -- min sample rate supported by the hardware
    BASS_INFO_maxrate = 24, -- max sample rate supported by the hardware
    BASS_INFO_eax = 28,     -- device supports EAX? (always FALSE if BASS_DEVICE_3D was not used)
    BASS_INFO_minbuf = 32,
    BASS_INFO_dsver = 36,   -- DirectSound version
    BASS_INFO_latency = 40, -- delay (in ms) before start of playback (requires BASS_DEVICE_LATENCY)
    BASS_INFO_initflags = 44, -- BASS_Init "flags" parameter
    BASS_INFO_speakers = 48, -- number of speakers available   
    BASS_INFO_freq = 52,    -- current output rate
    SIZE_OF_BASS_INFO = 56

-- BASS_INFO flags (from DSOUND.H)
global constant DSCAPS_CONTINUOUSRATE	= #00000010
-- supports all sample rates between min/maxrate 
global constant DSCAPS_EMULDRIVER		= #00000020
-- device does NOT have hardware DirectSound support 
global constant DSCAPS_CERTIFIED		= #00000040
-- device driver has been certified by Microsoft 
-- The following flags tell what type of samples are supported by HARDWARE
-- mixing, all these formats are supported by SOFTWARE mixing 
global constant DSCAPS_SECONDARYMONO	= #00000100	-- mono
global constant DSCAPS_SECONDARYSTEREO	= #00000200	-- stereo
global constant DSCAPS_SECONDARY8BIT	= #00000400	-- 8 bit
global constant DSCAPS_SECONDARY16BIT	= #00000800	-- 16 bit

export constant BASS_CONFIG_UPDATETHREADS = 24

export constant BASS_SAMPLE_8BITS		= 1	-- 8 bit
export constant BASS_SAMPLE_FLOAT		= 256	-- 32 bit floating-point
export constant BASS_SAMPLE_MONO		= 2	-- mono
export constant BASS_SAMPLE_LOOP		= 4	-- looped
export constant BASS_SAMPLE_3D			= 8	-- 3D functionality
export constant BASS_SAMPLE_SOFTWARE	= 16	-- not using hardware mixing
export constant BASS_SAMPLE_MUTEMAX		= 32	-- mute at max distance (3D only)
export constant BASS_SAMPLE_VAM			= 64	-- DX7 voice allocation & management
export constant BASS_SAMPLE_FX			= 128	-- old implementation of DX8 effects
export constant BASS_SAMPLE_OVER_VOL	= 0x10000	-- override lowest volume
export constant BASS_SAMPLE_OVER_POS	= 0x20000	-- override longest playing
export constant BASS_SAMPLE_OVER_DIST	= 0x30000 -- override furthest from listener (3D only)

export constant BASS_STREAM_PRESCAN		= 0x20000 -- enable pin-point seeking/length (MP3/MP2/MP1)
export constant BASS_STREAM_AUTOFREE	= 0x40000	-- automatically free the stream when it stop/ends
export constant BASS_STREAM_RESTRATE	= 0x80000	-- restrict the download rate of internet file streams
export constant BASS_STREAM_BLOCK		= 0x100000 -- download/play internet file stream in small blocks
export constant BASS_STREAM_DECODE		= 0x200000 -- don't play the stream, only decode (BASS_ChannelGetData)
export constant BASS_STREAM_STATUS		= 0x800000 -- give server status info (HTTP/ICY tags) in DOWNLOADPROC

export constant BASS_MP3_IGNOREDELAY	= 0x200 -- ignore LAME/Xing/VBRI/iTunes delay & padding info
export constant BASS_MP3_SETPOS			= BASS_STREAM_PRESCAN

export constant BASS_MUSIC_FLOAT		= BASS_SAMPLE_FLOAT
export constant BASS_MUSIC_MONO			= BASS_SAMPLE_MONO
export constant BASS_MUSIC_LOOP			= BASS_SAMPLE_LOOP
export constant BASS_MUSIC_3D			= BASS_SAMPLE_3D
export constant BASS_MUSIC_FX			= BASS_SAMPLE_FX
export constant BASS_MUSIC_AUTOFREE		= BASS_STREAM_AUTOFREE
export constant BASS_MUSIC_DECODE		= BASS_STREAM_DECODE
export constant BASS_MUSIC_PRESCAN		= BASS_STREAM_PRESCAN	-- calculate playback length
export constant BASS_MUSIC_CALCLEN		= BASS_MUSIC_PRESCAN
export constant BASS_MUSIC_RAMP			= 0x200	-- normal ramping
export constant BASS_MUSIC_RAMPS		= 0x400	-- sensitive ramping
export constant BASS_MUSIC_SURROUND		= 0x800	-- surround sound
export constant BASS_MUSIC_SURROUND2	= 0x1000	-- surround sound (mode 2)
export constant BASS_MUSIC_FT2PAN		= 0x2000	-- apply FastTracker 2 panning to XM files
export constant BASS_MUSIC_FT2MOD		= 0x2000	-- play .MOD as FastTracker 2 does
export constant BASS_MUSIC_PT1MOD		= 0x4000	-- play .MOD as ProTracker 1 does
export constant BASS_MUSIC_NONINTER		= 0x10000	-- non-interpolated sample mixing
export constant BASS_MUSIC_SINCINTER	= 0x800000 -- sinc interpolated sample mixing
export constant BASS_MUSIC_POSRESET		= 0x8000	-- stop all notes when moving position
export constant BASS_MUSIC_POSRESETEX	= 0x400000 -- stop all notes and reset bmp/etc when moving position
export constant BASS_MUSIC_STOPBACK		= 0x80000	-- stop the music on a backwards jump effect
export constant BASS_MUSIC_NOSAMPLE		= 0x100000 -- don't load the samples


export constant BASS_STREAMPROC_END = 0x80000000


-- DX7 voice allocation flags
global constant BASS_VAM_HARDWARE		= 1
-- Play the sample in hardware. If no hardware voices are available then
-- the "play" call will fail 
global constant BASS_VAM_SOFTWARE		= 2
-- Play the sample in software (ie. non-accelerated). No other VAM flags
-- may be used together with this flag. 

-- DX7 voice management flags
-- These flags enable hardware resource stealing... if the hardware has no
-- available voices, a currently playing buffer will be stopped to make room for
-- the new buffer. NOTE: only samples loaded/created with the BASS_SAMPLE_VAM
-- flag are considered for termination by the DX7 voice management. 
global constant BASS_VAM_TERM_TIME		= 4
-- If there are no free hardware voices, the buffer to be terminated will be
-- the one with the least time left to play. 
global constant BASS_VAM_TERM_DIST		= 8
-- If there are no free hardware voices, the buffer to be terminated will be
-- one that was loaded/created with the BASS_SAMPLE_MUTEMAX flag and is beyond
-- it's max distance. If there are no buffers that match this criteria, then the
-- "play" call will fail. 
global constant BASS_VAM_TERM_PRIO		= 16
-- If there are no free hardware voices, the buffer to be terminated will be
-- the one with the lowest priority. 

-- 3D channel modes
global constant BASS_3DMODE_NORMAL		= 0
-- normal 3D processing 
global constant BASS_3DMODE_RELATIVE	= 1
-- The channel's 3D position (position/velocity/orientation) are relative to
-- the listener. When the listener's position/velocity/orientation is changed
-- with BASS_Set3DPosition, the channel's position relative to the listener does
-- not change. 
global constant BASS_3DMODE_OFF         = 2
-- Turn off 3D processing on the channel, the sound will be played
-- in the center. 

-- software 3D mixing algorithm modes (used with BASS_Set3DAlgorithm)
global constant BASS_3DALG_DEFAULT  = 0
-- default algorithm (currently translates to BASS_3DALG_OFF) 
global constant BASS_3DALG_OFF      = 1
-- Uses normal left and right panning. The vertical axis is ignored except for
-- scaling of volume due to distance. Doppler shift and volume scaling are still
-- applied, but the 3D filtering is not performed. This is the most CPU efficient
-- software implementation, but provides no virtual 3D audio effect. Head Related
-- Transfer Function processing will not be done. Since only normal stereo panning
-- is used, a channel using this algorithm may be accelerated by a 2D hardware
-- voice if no free 3D hardware voices are available. 
global constant BASS_3DALG_FULL     = 2
-- This algorithm gives the highest quality 3D audio effect, but uses more CPU.
-- Requires Windows 98 2nd Edition or Windows 2000 that uses WDM drivers, if this
-- mode is not available then BASS_3DALG_OFF will be used instead. 
global constant BASS_3DALG_LIGHT    = 3
-- This algorithm gives a good 3D audio effect, and uses less CPU than the FULL
-- mode. Requires Windows 98 2nd Edition or Windows 2000 that uses WDM drivers, if
-- this mode is not available then BASS_3DALG_OFF will be used instead. 


-- Sync types (with BASS_ChannelSetSync() "param" and SYNCPROC "data"
-- definitions) & flags. 
global constant BASS_SYNC_MUSICPOS  = 10
-- Sync when a music reaches a position.
-- param: LOWORD=order (0=first, -1=all) HIWORD=row (0=first, -1=all)
-- data : LOWORD=order HIWORD=row 
global constant BASS_SYNC_MUSICINST = 1
-- Sync when an instrument (sample for the non-instrument based formats)
-- is played in a music (not including retrigs).
-- param: LOWORD=instrument (1=first) HIWORD=note (0=c0...119=b9, -1=all)
-- data : LOWORD=note HIWORD=volume (0-64) 
global constant BASS_SYNC_END       = 2
-- Sync when a music or file stream reaches the end.
-- param: not used
-- data : not used 
global constant BASS_SYNC_MUSICFX   = 3
-- Sync when the "sync" effect (XM/MTM/MOD: E8x, IT/S3M: S0x) is used.
-- param: 0:data=pos, 1:data="x" value
-- data : param=0: LOWORD=order HIWORD=row, param=1: "x" value 
global constant BASS_SYNC_MIXTIME   = #40000000 -- FLAG: sync at mixtime, else at playtime
global constant BASS_SYNC_ONETIME   = #80000000 -- FLAG: sync only once, else continuously



atom bass

        -- General
export integer  BASS_GetVersion,BASS_GetDeviceDescription,BASS_SetBufferLength,
        BASS_SetGlobalVolumes,BASS_GetGlobalVolumes,BASS_SetLogCurves,
        BASS_Set3DAlgorithm,BASS_ErrorGetCode,BASS_Init,BASS_Free,
        BASS_GetDSoundObject,BASS_GetInfo,BASS_GetCPU,BASS_Start,
        BASS_Stop,BASS_Pause,BASS_SetVolume,BASS_GetVolume,
        BASS_SetConfig,

        -- 3D sound
        BASS_Set3DFactors,BASS_Get3DFactors,BASS_Set3DPosition,
        BASS_Get3DPosition,BASS_Apply3D,

        -- Environmental Audio eXtensions 
        BASS_SetEAXParameters,BASS_GetEAXParameters,

        BASS_SetA3DResManager,BASS_GetA3DResManager,
        BASS_SetA3DHFAbsorbtion,BASS_GetA3DHFAbsorbtion,

        -- Music
        BASS_MusicLoad,BASS_MusicFree,BASS_MusicGetName,
        BASS_MusicGetLength,BASS_MusicPlay,BASS_MusicPlayEx,
        BASS_MusicSetAmplify,BASS_MusicSetPanSep,BASS_MusicSetPositionScaler,

        -- Samples
        BASS_SampleLoad,BASS_SampleCreate,BASS_SampleCreateDone,
        BASS_SampleFree,BASS_SampleGetInfo,BASS_SampleSetInfo,
        BASS_SamplePlay,BASS_SamplePlayEx,BASS_SamplePlay3D,
        BASS_SamplePlay3DEx,BASS_SampleStop,

        -- Streams
        BASS_StreamCreate,BASS_StreamCreateFile,BASS_StreamFree,
        BASS_StreamGetLength,BASS_StreamGetBlockLength,BASS_StreamPlay,

        -- Channels
        BASS_ChannelIsActive,BASS_ChannelGetFlags,BASS_ChannelStop,BASS_ChannelPlay,
        BASS_ChannelPause,BASS_ChannelResume,BASS_ChannelSetAttributes,
        BASS_ChannelGetAttributes,BASS_ChannelSet3DAttributes,
        BASS_ChannelGet3DAttributes,BASS_ChannelSet3DPosition,
        BASS_ChannelGet3DPosition,BASS_ChannelSetPosition,
        BASS_ChannelGetPosition,BASS_ChannelGetLevel,BASS_ChannelGetData,
        BASS_ChannelSetSync,BASS_ChannelRemoveSync,BASS_ChannelSetDSP,
        BASS_ChannelRemoveDSP,BASS_ChannelSetEAXMix,BASS_ChannelGetEAXMix



bass = open_dll("bass.dll")
if bass = NULL then
    bass = message_box("Couldn\'t find bass.dll","ERROR!", or_bits(MB_ICONERROR, MB_OK))
end if


BASS_Init = link_c_func(bass, "BASS_Init",{C_INT, C_UINT, C_UINT, C_UINT, C_POINTER}, C_INT)
BASS_Free = link_c_func(bass, "BASS_Free", {}, C_INT)
BASS_ErrorGetCode = link_c_func(bass, "BASS_ErrorGetCode", {}, C_INT)
BASS_Start = link_c_func(bass, "BASS_Start", {}, C_INT)
BASS_Stop = link_c_func(bass, "BASS_Stop", {}, C_INT)
BASS_Pause = link_c_func(bass, "BASS_Pause",{}, C_INT)
BASS_GetVolume = link_c_func(bass, "BASS_GetVolume", {}, C_FLOAT)
BASS_SetVolume = link_c_func(bass, "BASS_SetVolume",{C_FLOAT}, C_INT)
BASS_GetVersion = link_c_func(bass, "BASS_GetVersion", {}, C_UINT)

BASS_SetConfig = link_c_func(bass, "BASS_SetConfig", {C_UINT, C_UINT}, C_INT)

/* The third argument should the address of a function like this:
   function(atom handle, atom buffer, integer len, atom userData)
       -- Poke sample data to the buffer..
       return bytesWritten
   end function
*/   
BASS_StreamCreate = link_c_func(bass, "BASS_StreamCreate", {C_UINT, C_UINT, C_UINT, C_POINTER, C_POINTER}, C_UINT)
BASS_StreamFree = link_c_func(bass, "BASS_StreamFree", {C_UINT}, C_INT)

BASS_ChannelPlay = link_c_func(bass, "BASS_ChannelPlay", {C_UINT, C_INT}, C_INT)
BASS_ChannelPause = link_c_func(bass, "BASS_ChannelPause", {C_UINT}, C_INT)
BASS_ChannelStop = link_c_func(bass, "BASS_ChannelStop", {C_UINT}, C_INT)


   